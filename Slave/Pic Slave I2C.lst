CCS PCM C Compiler, Version 5.015, 5967               24-nov.-20 00:20

               Filename:   C:\Users\SNK93\OneDrive\Documentos\BUAP\Microprocesadores\Practicas\Proyecto\Slave\Pic Slave I2C.lst

               ROM used:   1212 words (15%)
                           Largest free fragment is 2048
               RAM used:   14 (4%) at main() level
                           78 (21%) worst case
               Stack used: 5 locations
               Stack size: 8

*
0000:  MOVLW  02
0001:  MOVWF  0A
0002:  GOTO   26A
0003:  NOP
.................... #include <16F876a.h> 
.................... //////////// Standard Header file for the PIC16F876A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F876A 
0004:  DATA 49,37
0005:  DATA 67,39
0006:  DATA E5,39
0007:  DATA 65,10
0008:  DATA 75,37
0009:  DATA 61,00
000A:  DATA 6F,38
000B:  DATA E3,34
000C:  DATA 6F,37
000D:  DATA 00,01
000E:  DATA 53,36
000F:  DATA 6F,3A
0010:  DATA 73,10
0011:  DATA 6C,36
0012:  DATA 65,37
0013:  DATA EF,39
0014:  DATA 00,01
0015:  DATA C3,37
0016:  DATA EC,37
0017:  DATA F1,3A
0018:  DATA 65,10
0019:  DATA F3,3A
001A:  DATA 20,32
001B:  DATA 65,32
001C:  DATA 6F,00
001D:  DATA 73,36
001E:  DATA 6F,3A
001F:  DATA A0,12
0020:  DATA 64,1D
0021:  DATA 20,00
0022:  DATA CE,3A
0023:  DATA 65,3B
0024:  DATA E1,36
0025:  DATA 65,37
0026:  DATA F4,32
0027:  DATA 00,01
0028:  DATA 65,39
0029:  DATA F2,37
002A:  DATA 72,00
002B:  DATA D2,32
002C:  DATA E7,34
002D:  DATA 73,3A
002E:  DATA F2,30
002F:  DATA E4,37
0030:  DATA 00,01
0031:  DATA C3,37
0032:  DATA EC,37
0033:  DATA F1,3A
0034:  DATA 65,10
0035:  DATA F3,3A
0036:  DATA 20,32
0037:  DATA 65,32
0038:  DATA 6F,00
0039:  DATA C1,31
003A:  DATA E3,32
003B:  DATA F3,37
003C:  DATA 00,01
003D:  DATA C1,31
003E:  DATA E3,32
003F:  DATA F3,37
0040:  DATA 20,32
0041:  DATA 65,37
0042:  DATA E5,33
0043:  DATA 61,32
0044:  DATA 6F,00
*
0128:  MOVF   0B,W
0129:  MOVWF  58
012A:  BCF    0B.7
012B:  BSF    03.5
012C:  BSF    03.6
012D:  BSF    0C.7
012E:  BSF    0C.0
012F:  NOP
0130:  NOP
0131:  BCF    03.5
0132:  BCF    03.6
0133:  BTFSC  58.7
0134:  BSF    0B.7
0135:  BSF    03.6
0136:  MOVF   0C,W
0137:  ANDLW  7F
0138:  BTFSC  03.2
0139:  GOTO   17C
013A:  BCF    03.6
013B:  MOVWF  58
013C:  BSF    03.6
013D:  MOVF   0D,W
013E:  BCF    03.6
013F:  MOVWF  59
0140:  BSF    03.6
0141:  MOVF   0F,W
0142:  BCF    03.6
0143:  MOVWF  5A
0144:  MOVF   58,W
0145:  MOVWF  5F
0146:  CALL   0FC
0147:  MOVF   59,W
0148:  BSF    03.6
0149:  MOVWF  0D
014A:  BCF    03.6
014B:  MOVF   5A,W
014C:  BSF    03.6
014D:  MOVWF  0F
014E:  BCF    03.6
014F:  MOVF   0B,W
0150:  MOVWF  5B
0151:  BCF    0B.7
0152:  BSF    03.5
0153:  BSF    03.6
0154:  BSF    0C.7
0155:  BSF    0C.0
0156:  NOP
0157:  NOP
0158:  BCF    03.5
0159:  BCF    03.6
015A:  BTFSC  5B.7
015B:  BSF    0B.7
015C:  BSF    03.6
015D:  RLF    0C,W
015E:  RLF    0E,W
015F:  ANDLW  7F
0160:  BTFSC  03.2
0161:  GOTO   17C
0162:  BCF    03.6
0163:  MOVWF  58
0164:  BSF    03.6
0165:  MOVF   0D,W
0166:  BCF    03.6
0167:  MOVWF  59
0168:  BSF    03.6
0169:  MOVF   0F,W
016A:  BCF    03.6
016B:  MOVWF  5A
016C:  MOVF   58,W
016D:  MOVWF  5F
016E:  CALL   0FC
016F:  MOVF   59,W
0170:  BSF    03.6
0171:  MOVWF  0D
0172:  BCF    03.6
0173:  MOVF   5A,W
0174:  BSF    03.6
0175:  MOVWF  0F
0176:  INCF   0D,F
0177:  BTFSC  03.2
0178:  INCF   0F,F
0179:  BCF    03.6
017A:  GOTO   128
017B:  BSF    03.6
017C:  BCF    03.6
017D:  RETURN
017E:  MOVF   0B,W
017F:  MOVWF  5A
0180:  BCF    0B.7
0181:  BSF    03.5
0182:  BSF    03.6
0183:  BSF    0C.7
0184:  BSF    0C.0
0185:  NOP
0186:  NOP
0187:  BCF    03.5
0188:  BCF    03.6
0189:  BTFSC  5A.7
018A:  BSF    0B.7
018B:  BTFSC  03.0
018C:  GOTO   1B5
018D:  BSF    03.6
018E:  MOVF   0C,W
018F:  ANDLW  7F
0190:  BCF    03.6
0191:  MOVWF  5A
0192:  BSF    03.6
0193:  MOVF   0D,W
0194:  BCF    03.6
0195:  MOVWF  5B
0196:  BSF    03.6
0197:  MOVF   0F,W
0198:  BCF    03.6
0199:  MOVWF  5C
019A:  MOVF   5A,W
019B:  MOVWF  5F
019C:  CALL   0FC
019D:  MOVF   5B,W
019E:  BSF    03.6
019F:  MOVWF  0D
01A0:  BCF    03.6
01A1:  MOVF   5C,W
01A2:  BSF    03.6
01A3:  MOVWF  0F
01A4:  BCF    03.6
01A5:  MOVF   0B,W
01A6:  MOVWF  5D
01A7:  BCF    0B.7
01A8:  BSF    03.5
01A9:  BSF    03.6
01AA:  BSF    0C.7
01AB:  BSF    0C.0
01AC:  NOP
01AD:  NOP
01AE:  BCF    03.5
01AF:  BCF    03.6
01B0:  BTFSC  5D.7
01B1:  BSF    0B.7
01B2:  DECFSZ 59,F
01B3:  GOTO   1B5
01B4:  GOTO   1D4
01B5:  BSF    03.6
01B6:  RLF    0C,W
01B7:  RLF    0E,W
01B8:  ANDLW  7F
01B9:  BCF    03.6
01BA:  MOVWF  5A
01BB:  BSF    03.6
01BC:  MOVF   0D,W
01BD:  BCF    03.6
01BE:  MOVWF  5B
01BF:  BSF    03.6
01C0:  MOVF   0F,W
01C1:  BCF    03.6
01C2:  MOVWF  5C
01C3:  MOVF   5A,W
01C4:  MOVWF  5F
01C5:  CALL   0FC
01C6:  MOVF   5B,W
01C7:  BSF    03.6
01C8:  MOVWF  0D
01C9:  BCF    03.6
01CA:  MOVF   5C,W
01CB:  BSF    03.6
01CC:  MOVWF  0F
01CD:  INCF   0D,F
01CE:  BTFSC  03.2
01CF:  INCF   0F,F
01D0:  BCF    03.0
01D1:  BCF    03.6
01D2:  DECFSZ 59,F
01D3:  GOTO   17E
01D4:  BCF    0A.3
01D5:  BCF    0A.4
01D6:  GOTO   342 (RETURN)
01D7:  MOVF   60,W
01D8:  CLRF   78
01D9:  SUBWF  5F,W
01DA:  BTFSC  03.0
01DB:  GOTO   1DF
01DC:  MOVF   5F,W
01DD:  MOVWF  77
01DE:  GOTO   1EB
01DF:  CLRF   77
01E0:  MOVLW  08
01E1:  MOVWF  61
01E2:  RLF    5F,F
01E3:  RLF    77,F
01E4:  MOVF   60,W
01E5:  SUBWF  77,W
01E6:  BTFSC  03.0
01E7:  MOVWF  77
01E8:  RLF    78,F
01E9:  DECFSZ 61,F
01EA:  GOTO   1E2
01EB:  RETURN
01EC:  MOVLW  20
01ED:  BTFSS  5A.4
01EE:  MOVLW  30
01EF:  MOVWF  5B
01F0:  MOVF   59,W
01F1:  MOVWF  77
01F2:  BTFSS  59.7
01F3:  GOTO   1FC
01F4:  COMF   77,F
01F5:  INCF   77,F
01F6:  MOVF   77,W
01F7:  MOVWF  59
01F8:  MOVLW  2D
01F9:  MOVWF  5B
01FA:  BSF    5A.7
01FB:  BSF    5A.0
01FC:  MOVF   59,W
01FD:  MOVWF  5F
01FE:  MOVLW  64
01FF:  MOVWF  60
0200:  CALL   1D7
0201:  MOVF   77,W
0202:  MOVWF  59
0203:  MOVLW  30
0204:  ADDWF  78,W
0205:  MOVWF  5C
0206:  MOVF   59,W
0207:  MOVWF  5F
0208:  MOVLW  0A
0209:  MOVWF  60
020A:  CALL   1D7
020B:  MOVLW  30
020C:  ADDWF  77,W
020D:  MOVWF  5E
020E:  MOVLW  30
020F:  ADDWF  78,W
0210:  MOVWF  5D
0211:  MOVF   5B,W
0212:  MOVWF  77
0213:  MOVLW  30
0214:  SUBWF  5C,W
0215:  BTFSC  03.2
0216:  GOTO   21B
0217:  BSF    5A.1
0218:  BTFSC  5A.7
0219:  BSF    5A.2
021A:  GOTO   22F
021B:  MOVF   5B,W
021C:  MOVWF  5C
021D:  MOVLW  20
021E:  MOVWF  5B
021F:  MOVLW  30
0220:  SUBWF  5D,W
0221:  BTFSC  03.2
0222:  GOTO   227
0223:  BSF    5A.0
0224:  BTFSC  5A.7
0225:  BSF    5A.1
0226:  GOTO   22F
0227:  BTFSS  03.2
0228:  BSF    5A.0
0229:  BTFSS  03.2
022A:  GOTO   22F
022B:  MOVF   5C,W
022C:  MOVWF  5D
022D:  MOVLW  20
022E:  MOVWF  5C
022F:  BTFSC  5A.2
0230:  GOTO   236
0231:  BTFSC  5A.1
0232:  GOTO   239
0233:  BTFSC  5A.0
0234:  GOTO   23C
0235:  GOTO   23F
0236:  MOVF   5B,W
0237:  MOVWF  5F
0238:  CALL   0FC
0239:  MOVF   5C,W
023A:  MOVWF  5F
023B:  CALL   0FC
023C:  MOVF   5D,W
023D:  MOVWF  5F
023E:  CALL   0FC
023F:  MOVF   5E,W
0240:  MOVWF  5F
0241:  CALL   0FC
0242:  BCF    0A.3
0243:  BCF    0A.4
0244:  GOTO   347 (RETURN)
0245:  CLRF   77
0246:  CLRF   78
0247:  MOVF   58,W
0248:  BCF    03.0
0249:  BTFSC  59.0
024A:  ADDWF  77,F
024B:  RRF    77,F
024C:  RRF    78,F
024D:  BTFSC  59.1
024E:  ADDWF  77,F
024F:  RRF    77,F
0250:  RRF    78,F
0251:  BTFSC  59.2
0252:  ADDWF  77,F
0253:  RRF    77,F
0254:  RRF    78,F
0255:  BTFSC  59.3
0256:  ADDWF  77,F
0257:  RRF    77,F
0258:  RRF    78,F
0259:  BTFSC  59.4
025A:  ADDWF  77,F
025B:  RRF    77,F
025C:  RRF    78,F
025D:  BTFSC  59.5
025E:  ADDWF  77,F
025F:  RRF    77,F
0260:  RRF    78,F
0261:  BTFSC  59.6
0262:  ADDWF  77,F
0263:  RRF    77,F
0264:  RRF    78,F
0265:  BTFSC  59.7
0266:  ADDWF  77,F
0267:  RRF    77,F
0268:  RRF    78,F
0269:  RETURN
....................  
.................... #list 
....................  
.................... #define use_portb_kbd TRUE     
.................... #include<kbd.c> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                             KBD.C                                 //// 
.................... ////                  Generic keypad scan driver                       //// 
.................... ////                                                                   //// 
.................... ////  kbd_init()   Must be called before any other function.           //// 
.................... ////                                                                   //// 
.................... ////  c = kbd_getc(c)  Will return a key value if pressed or /0 if not //// 
.................... ////                   This function should be called frequently so as //// 
.................... ////                   not to miss a key press.                        //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... ////////////////// The following defines the keypad layout on port D 
....................  
.................... // Un-comment the following define to use port B 
.................... // #define use_portb_kbd TRUE 
....................  
.................... // Make sure the port used has pull-up resistors (or the LCD) on 
.................... // the column pins 
....................  
.................... #if defined use_portb_kbd 
....................    #byte kbd = getenv("SFR:PORTB") 
.................... #else 
....................    #byte kbd = getenv("SFR:PORTD") 
.................... #endif 
....................  
.................... #if defined use_portb_kbd 
....................    #define set_tris_kbd(x) set_tris_b(x) 
.................... #else 
....................    #define set_tris_kbd(x) set_tris_d(x) 
.................... #endif 
....................  
.................... //Keypad connection:   (for example column 0 is B2) 
.................... //                Bx: 
....................  
.................... #ifdef blue_keypad  ///////////////////////////////////// For the blue keypad 
.................... #define COL0 (1 << 2) 
.................... #define COL1 (1 << 3) 
.................... #define COL2 (1 << 6) 
....................  
.................... #define ROW0 (1 << 4) 
.................... #define ROW1 (1 << 7) 
.................... #define ROW2 (1 << 1) 
.................... #define ROW3 (1 << 5) 
....................  
.................... #else ////////////////////////////////////////////////// For the black keypad 
.................... #define COL0 (1 << 5) 
.................... #define COL1 (1 << 6) 
.................... #define COL2 (1 << 7) 
....................  
.................... #define ROW0 (1 << 1) 
.................... #define ROW1 (1 << 2) 
.................... #define ROW2 (1 << 3) 
.................... #define ROW3 (1 << 4) 
....................  
.................... #endif 
....................  
.................... #define ALL_ROWS (ROW0|ROW1|ROW2|ROW3) 
.................... #define ALL_PINS (ALL_ROWS|COL0|COL1|COL2) 
....................  
.................... // Keypad layout: 
.................... char const KEYS[4][3] = {{'1','2','3'}, 
....................                          {'4','5','6'}, 
....................                          {'7','8','9'}, 
....................                          {'*','0','#'}}; 
....................  
.................... #define KBD_DEBOUNCE_FACTOR 33    // Set this number to apx n/333 where 
....................                                   // n is the number of times you expect 
....................                                   // to call kbd_getc each second 
....................  
....................  
.................... void kbd_init() { 
.................... } 
....................  
.................... char kbd_getc( ) { 
....................    static BYTE kbd_call_count; 
*
0286:  BCF    03.5
0287:  CLRF   20
....................    static int1 kbd_down; 
0288:  BCF    21.0
....................    static char last_key; 
0289:  CLRF   22
....................    static BYTE col; 
028A:  CLRF   23
....................  
....................    BYTE kchar; 
....................    BYTE row; 
....................  
....................    kchar='\0'; 
....................    if(++kbd_call_count>KBD_DEBOUNCE_FACTOR) { 
....................        switch (col) { 
....................          case 0   : set_tris_kbd(ALL_PINS&~COL0); 
....................                     kbd=~COL0&ALL_PINS; 
....................                     break; 
....................          case 1   : set_tris_kbd(ALL_PINS&~COL1); 
....................                     kbd=~COL1&ALL_PINS; 
....................                     break; 
....................          case 2   : set_tris_kbd(ALL_PINS&~COL2); 
....................                     kbd=~COL2&ALL_PINS; 
....................                     break; 
....................        } 
....................  
....................        if(kbd_down) { 
....................          if((kbd & (ALL_ROWS))==(ALL_ROWS)) { 
....................            kbd_down=FALSE; 
....................            kchar=last_key; 
....................            last_key='\0'; 
....................          } 
....................        } else { 
....................           if((kbd & (ALL_ROWS))!=(ALL_ROWS)) { 
....................              if((kbd & ROW0)==0) 
....................                row=0; 
....................              else if((kbd & ROW1)==0) 
....................                row=1; 
....................              else if((kbd & ROW2)==0) 
....................                row=2; 
....................              else if((kbd & ROW3)==0) 
....................                row=3; 
....................              last_key =KEYS[row][col]; 
....................              kbd_down = TRUE; 
....................           } else { 
....................              ++col; 
....................              if(col==3) 
....................                col=0; 
....................           } 
....................        } 
....................       kbd_call_count=0; 
....................    } 
....................   set_tris_kbd(ALL_PINS); 
....................   return(kchar); 
.................... } 
....................  
....................  
....................  
.................... #fuses XT 
.................... #use delay (clock=4000000) 
*
0045:  MOVLW  60
0046:  MOVWF  04
0047:  BCF    03.7
0048:  MOVF   00,W
0049:  BTFSC  03.2
004A:  GOTO   059
004B:  MOVLW  01
004C:  MOVWF  78
004D:  CLRF   77
004E:  DECFSZ 77,F
004F:  GOTO   04E
0050:  DECFSZ 78,F
0051:  GOTO   04D
0052:  MOVLW  4A
0053:  MOVWF  77
0054:  DECFSZ 77,F
0055:  GOTO   054
0056:  GOTO   057
0057:  DECFSZ 00,F
0058:  GOTO   04B
0059:  RETURN
....................  
.................... #use standard_io(b) 
.................... #use standard_io(c) 
.................... #use standard_io(a) 
.................... #use I2C(SLAVE, SDA=PIN_C4 ,SLOW, SCL=PIN_C3, ADDRESS=0xa0, NOFORCE_SW) 
....................  
....................  
....................  
.................... #include <lcd.c> 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
....................    output_float(LCD_DATA5); 
....................    output_float(LCD_DATA6); 
....................    output_float(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0xF; 
*
0072:  MOVLW  0F
0073:  BSF    03.5
0074:  ANDWF  06,W
0075:  IORLW  F0
0076:  MOVWF  06
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
0077:  BCF    03.5
0078:  BSF    06.2
....................    delay_cycles(1); 
0079:  NOP
....................    lcd_output_enable(1); 
007A:  BSF    06.0
....................    delay_cycles(1); 
007B:  NOP
....................    high = lcd_read_nibble(); 
007C:  CALL   066
007D:  MOVF   78,W
007E:  MOVWF  67
....................        
....................    lcd_output_enable(0); 
007F:  BCF    06.0
....................    delay_cycles(1); 
0080:  NOP
....................    lcd_output_enable(1); 
0081:  BSF    06.0
....................    delay_us(1); 
0082:  NOP
....................    low = lcd_read_nibble(); 
0083:  CALL   066
0084:  MOVF   78,W
0085:  MOVWF  66
....................        
....................    lcd_output_enable(0); 
0086:  BCF    06.0
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
0087:  MOVLW  0F
0088:  BSF    03.5
0089:  ANDWF  06,W
008A:  MOVWF  06
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
008B:  BCF    03.5
008C:  SWAPF  67,W
008D:  MOVWF  77
008E:  MOVLW  F0
008F:  ANDWF  77,F
0090:  MOVF   77,W
0091:  IORWF  66,W
0092:  MOVWF  78
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
....................    n |= input(LCD_DATA5) << 1; 
....................    n |= input(LCD_DATA6) << 2; 
....................    n |= input(LCD_DATA7) << 3; 
....................     
....................    return(n); 
....................   #else 
....................    return(lcd.data); 
*
0066:  MOVF   06,W
0067:  MOVWF  77
0068:  SWAPF  06,W
0069:  ANDLW  0F
006A:  MOVWF  78
....................   #endif 
006B:  RETURN
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
....................   #else       
....................    lcdlat.data = n; 
*
005A:  SWAPF  67,W
005B:  ANDLW  F0
005C:  MOVWF  77
005D:  MOVLW  0F
005E:  ANDWF  06,W
005F:  IORWF  77,W
0060:  MOVWF  06
....................   #endif 
....................        
....................    delay_cycles(1); 
0061:  NOP
....................    lcd_output_enable(1); 
0062:  BSF    06.0
....................    delay_us(2); 
0063:  GOTO   064
....................    lcd_output_enable(0); 
0064:  BCF    06.0
0065:  RETURN
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
006C:  BSF    03.5
006D:  BCF    06.0
....................    lcd_rs_tris(); 
006E:  BCF    06.1
....................    lcd_rw_tris(); 
006F:  BCF    06.2
....................   #endif 
....................  
....................    lcd_output_rs(0); 
0070:  BCF    03.5
0071:  BCF    06.1
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
0093:  MOVF   78,W
0094:  MOVWF  66
0095:  BTFSC  66.7
0096:  GOTO   072
....................    lcd_output_rs(address); 
0097:  BTFSS  64.0
0098:  BCF    06.1
0099:  BTFSC  64.0
009A:  BSF    06.1
....................    delay_cycles(1); 
009B:  NOP
....................    lcd_output_rw(0); 
009C:  BCF    06.2
....................    delay_cycles(1); 
009D:  NOP
....................    lcd_output_enable(0); 
009E:  BCF    06.0
....................    lcd_send_nibble(n >> 4); 
009F:  SWAPF  65,W
00A0:  MOVWF  66
00A1:  MOVLW  0F
00A2:  ANDWF  66,F
00A3:  MOVF   66,W
00A4:  MOVWF  67
00A5:  CALL   05A
....................    lcd_send_nibble(n & 0xf); 
00A6:  MOVF   65,W
00A7:  ANDLW  0F
00A8:  MOVWF  66
00A9:  MOVWF  67
00AA:  CALL   05A
00AB:  RETURN
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
00AC:  MOVLW  28
00AD:  MOVWF  59
00AE:  MOVLW  0C
00AF:  MOVWF  5A
00B0:  MOVLW  01
00B1:  MOVWF  5B
00B2:  MOVLW  06
00B3:  MOVWF  5C
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................     
....................  
....................    lcd_output_enable(0); 
00B4:  BCF    06.0
....................    lcd_output_rs(0); 
00B5:  BCF    06.1
....................    lcd_output_rw(0); 
00B6:  BCF    06.2
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
00B7:  MOVLW  0F
00B8:  BSF    03.5
00B9:  ANDWF  06,W
00BA:  MOVWF  06
....................   #endif 
....................    lcd_enable_tris(); 
00BB:  BCF    06.0
....................    lcd_rs_tris(); 
00BC:  BCF    06.1
....................    lcd_rw_tris(); 
00BD:  BCF    06.2
....................  #endif 
....................      
....................    delay_ms(15); 
00BE:  MOVLW  0F
00BF:  BCF    03.5
00C0:  MOVWF  60
00C1:  CALL   045
....................    for(i=1;i<=3;++i) 
00C2:  MOVLW  01
00C3:  MOVWF  58
00C4:  MOVF   58,W
00C5:  SUBLW  03
00C6:  BTFSS  03.0
00C7:  GOTO   0D0
....................    { 
....................        lcd_send_nibble(3); 
00C8:  MOVLW  03
00C9:  MOVWF  67
00CA:  CALL   05A
....................        delay_ms(5); 
00CB:  MOVLW  05
00CC:  MOVWF  60
00CD:  CALL   045
00CE:  INCF   58,F
00CF:  GOTO   0C4
....................    } 
....................     
....................    lcd_send_nibble(2); 
00D0:  MOVLW  02
00D1:  MOVWF  67
00D2:  CALL   05A
....................    delay_ms(5); 
00D3:  MOVLW  05
00D4:  MOVWF  60
00D5:  CALL   045
....................    for(i=0;i<=3;++i) 
00D6:  CLRF   58
00D7:  MOVF   58,W
00D8:  SUBLW  03
00D9:  BTFSS  03.0
00DA:  GOTO   0E7
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
00DB:  MOVLW  59
00DC:  ADDWF  58,W
00DD:  MOVWF  04
00DE:  BCF    03.7
00DF:  MOVF   00,W
00E0:  MOVWF  5D
00E1:  CLRF   64
00E2:  MOVF   5D,W
00E3:  MOVWF  65
00E4:  CALL   06C
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
00E5:  INCF   58,F
00E6:  GOTO   0D7
00E7:  BCF    0A.3
00E8:  BCF    0A.4
00E9:  GOTO   295 (RETURN)
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
00EA:  DECFSZ 61,W
00EB:  GOTO   0ED
00EC:  GOTO   0F0
....................       address=LCD_LINE_TWO; 
00ED:  MOVLW  40
00EE:  MOVWF  62
00EF:  GOTO   0F1
....................    else 
....................       address=0; 
00F0:  CLRF   62
....................       
....................    address+=x-1; 
00F1:  MOVLW  01
00F2:  SUBWF  60,W
00F3:  ADDWF  62,F
....................    lcd_send_byte(0,0x80|address); 
00F4:  MOVF   62,W
00F5:  IORLW  80
00F6:  MOVWF  63
00F7:  CLRF   64
00F8:  MOVF   63,W
00F9:  MOVWF  65
00FA:  CALL   06C
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
00FB:  RETURN
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
00FC:  MOVF   5F,W
00FD:  XORLW  07
00FE:  BTFSC  03.2
00FF:  GOTO   10A
0100:  XORLW  0B
0101:  BTFSC  03.2
0102:  GOTO   10F
0103:  XORLW  06
0104:  BTFSC  03.2
0105:  GOTO   117
0106:  XORLW  02
0107:  BTFSC  03.2
0108:  GOTO   11D
0109:  GOTO   122
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
010A:  MOVLW  01
010B:  MOVWF  60
010C:  MOVWF  61
010D:  CALL   0EA
010E:  GOTO   127
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
010F:  CLRF   64
0110:  MOVLW  01
0111:  MOVWF  65
0112:  CALL   06C
....................                      delay_ms(2); 
0113:  MOVLW  02
0114:  MOVWF  60
0115:  CALL   045
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
0116:  GOTO   127
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
0117:  MOVLW  01
0118:  MOVWF  60
0119:  MOVLW  02
011A:  MOVWF  61
011B:  CALL   0EA
011C:  GOTO   127
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
011D:  CLRF   64
011E:  MOVLW  10
011F:  MOVWF  65
0120:  CALL   06C
0121:  GOTO   127
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
0122:  MOVLW  01
0123:  MOVWF  64
0124:  MOVF   5F,W
0125:  MOVWF  65
0126:  CALL   06C
....................      #endif 
....................    } 
0127:  RETURN
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
.................... void main()  
*
026A:  MOVF   03,W
026B:  ANDLW  1F
026C:  MOVWF  03
026D:  MOVLW  FF
026E:  MOVWF  24
026F:  BSF    24.3
0270:  MOVF   24,W
0271:  BSF    03.5
0272:  MOVWF  07
0273:  BCF    03.5
0274:  BSF    24.4
0275:  MOVF   24,W
0276:  BSF    03.5
0277:  MOVWF  07
0278:  MOVLW  A0
0279:  MOVWF  13
027A:  MOVLW  36
027B:  BCF    03.5
027C:  MOVWF  14
027D:  BSF    03.5
027E:  BSF    11.0
027F:  BSF    1F.0
0280:  BSF    1F.1
0281:  BSF    1F.2
0282:  BCF    1F.3
0283:  MOVLW  07
0284:  MOVWF  1C
0285:  BCF    03.7
.................... { 
....................  
....................    output_a(0b11111111); 
*
028B:  BSF    03.5
028C:  CLRF   05
028D:  MOVLW  FF
028E:  BCF    03.5
028F:  MOVWF  05
....................     
....................    char dato; 
....................    int ban=0; 
....................    int exit=0; 
....................    char finger[5][5]; 
....................    char aux[2][8]; 
....................    int indx=0; 
....................    int indy=0; 
0290:  CLRF   26
0291:  CLRF   27
0292:  CLRF   51
0293:  CLRF   52
....................    lcd_init(); 
0294:  GOTO   0AC
....................    
....................     
....................    while(true)//while principal 
....................    { 
....................       printf(lcd_putc,"\f"); 
0295:  MOVLW  0C
0296:  MOVWF  5F
0297:  CALL   0FC
....................       printf(lcd_putc,"Ingrese una"); 
0298:  MOVLW  04
0299:  BSF    03.6
029A:  MOVWF  0D
029B:  MOVLW  00
029C:  MOVWF  0F
029D:  BCF    03.6
029E:  CALL   128
....................       lcd_gotoxy(2,2); 
029F:  MOVLW  02
02A0:  MOVWF  60
02A1:  MOVWF  61
02A2:  CALL   0EA
....................       printf(lcd_putc,"opcion"); 
02A3:  MOVLW  0A
02A4:  BSF    03.6
02A5:  MOVWF  0D
02A6:  MOVLW  00
02A7:  MOVWF  0F
02A8:  BCF    03.6
02A9:  CALL   128
....................              
....................       while (exit==0)//para esperar pulsador 
02AA:  MOVF   27,F
02AB:  BTFSS  03.2
02AC:  GOTO   2BF
....................       { 
....................          if(input(pin_a0)) 
02AD:  BSF    03.5
02AE:  BSF    05.0
02AF:  BCF    03.5
02B0:  BTFSS  05.0
02B1:  GOTO   2B5
....................          { 
....................             ban=1; 
02B2:  MOVLW  01
02B3:  MOVWF  26
....................             exit=1; 
02B4:  MOVWF  27
....................          } 
....................          if(input(pin_a1)) 
02B5:  BSF    03.5
02B6:  BSF    05.1
02B7:  BCF    03.5
02B8:  BTFSS  05.1
02B9:  GOTO   2BE
....................          { 
....................          
....................         
....................             ban=2; 
02BA:  MOVLW  02
02BB:  MOVWF  26
....................             exit=1; 
02BC:  MOVLW  01
02BD:  MOVWF  27
....................          } 
02BE:  GOTO   2AA
....................     
....................       }//while   
....................       exit=0; 
02BF:  CLRF   27
....................       printf(lcd_putc,"\f"); 
02C0:  MOVLW  0C
02C1:  MOVWF  5F
02C2:  CALL   0FC
....................    
....................   if(ban==1 && indx>4) 
02C3:  DECFSZ 26,W
02C4:  GOTO   2DB
02C5:  MOVF   51,W
02C6:  SUBLW  04
02C7:  BTFSC  03.0
02C8:  GOTO   2DB
....................   { 
....................       printf(lcd_putc,"\f"); 
02C9:  MOVLW  0C
02CA:  MOVWF  5F
02CB:  CALL   0FC
....................       printf(lcd_putc,"Slots llenos"); 
02CC:  MOVLW  0E
02CD:  BSF    03.6
02CE:  MOVWF  0D
02CF:  MOVLW  00
02D0:  MOVWF  0F
02D1:  BCF    03.6
02D2:  CALL   128
....................       delay_ms(1000); 
02D3:  MOVLW  04
02D4:  MOVWF  58
02D5:  MOVLW  FA
02D6:  MOVWF  60
02D7:  CALL   045
02D8:  DECFSZ 58,F
02D9:  GOTO   2D5
....................       ban=0; 
02DA:  CLRF   26
....................    } 
....................   if(ban==1) 
02DB:  DECFSZ 26,W
02DC:  GOTO   410
....................   { 
....................        
....................       while(ban==1)//registro 
02DD:  DECFSZ 26,W
02DE:  GOTO   3FC
....................       { 
....................          printf(lcd_putc,"\f"); 
02DF:  MOVLW  0C
02E0:  MOVWF  5F
02E1:  CALL   0FC
....................          printf(lcd_putc,"Coloque su dedo"); 
02E2:  MOVLW  15
02E3:  BSF    03.6
02E4:  MOVWF  0D
02E5:  MOVLW  00
02E6:  MOVWF  0F
02E7:  BCF    03.6
02E8:  CALL   128
....................      
....................          lcd_gotoxy(2,2); 
02E9:  MOVLW  02
02EA:  MOVWF  60
02EB:  MOVWF  61
02EC:  CALL   0EA
....................          exit=0; 
02ED:  CLRF   27
....................          while(indy<4)//ingresar digitos 
02EE:  MOVF   52,W
02EF:  SUBLW  03
02F0:  BTFSS  03.0
02F1:  GOTO   35B
....................          { 
....................           
....................             if(i2c_poll())  
02F2:  BSF    03.5
02F3:  BTFSS  14.0
02F4:  GOTO   359
....................             { 
....................                dato=i2c_read(); 
02F5:  BCF    03.5
02F6:  BCF    14.6
02F7:  BTFSS  0C.3
02F8:  GOTO   2F7
02F9:  MOVF   13,W
02FA:  BSF    14.4
02FB:  MOVWF  25
....................                if(dato=='*') 
02FC:  MOVF   25,W
02FD:  SUBLW  2A
02FE:  BTFSS  03.2
02FF:  GOTO   303
....................                   exit=1; 
0300:  MOVLW  01
0301:  MOVWF  27
0302:  GOTO   358
....................                else if(dato=='1'||dato=='2'||dato=='3'||dato=='4'||dato=='5'||dato=='6'||dato=='7'||dato=='8'||dato=='9'||dato=='0') 
0303:  MOVF   25,W
0304:  SUBLW  31
0305:  BTFSC  03.2
0306:  GOTO   32B
0307:  MOVF   25,W
0308:  SUBLW  32
0309:  BTFSC  03.2
030A:  GOTO   32B
030B:  MOVF   25,W
030C:  SUBLW  33
030D:  BTFSC  03.2
030E:  GOTO   32B
030F:  MOVF   25,W
0310:  SUBLW  34
0311:  BTFSC  03.2
0312:  GOTO   32B
0313:  MOVF   25,W
0314:  SUBLW  35
0315:  BTFSC  03.2
0316:  GOTO   32B
0317:  MOVF   25,W
0318:  SUBLW  36
0319:  BTFSC  03.2
031A:  GOTO   32B
031B:  MOVF   25,W
031C:  SUBLW  37
031D:  BTFSC  03.2
031E:  GOTO   32B
031F:  MOVF   25,W
0320:  SUBLW  38
0321:  BTFSC  03.2
0322:  GOTO   32B
0323:  MOVF   25,W
0324:  SUBLW  39
0325:  BTFSC  03.2
0326:  GOTO   32B
0327:  MOVF   25,W
0328:  SUBLW  30
0329:  BTFSS  03.2
032A:  GOTO   358
....................                { 
....................                   aux[0][indy]=dato; 
032B:  MOVLW  41
032C:  ADDWF  52,W
032D:  MOVWF  04
032E:  BCF    03.7
032F:  MOVF   25,W
0330:  MOVWF  00
....................                   //printf(lcd_putc,"\f"); 
....................                   lcd_gotoxy(2,2); 
0331:  MOVLW  02
0332:  MOVWF  60
0333:  MOVWF  61
0334:  CALL   0EA
....................                   printf(lcd_putc,"slot %d: ",indx+1); 
0335:  MOVLW  01
0336:  ADDWF  51,W
0337:  MOVWF  58
0338:  MOVLW  1D
0339:  BSF    03.6
033A:  MOVWF  0D
033B:  MOVLW  00
033C:  MOVWF  0F
033D:  BCF    03.0
033E:  MOVLW  05
033F:  BCF    03.6
0340:  MOVWF  59
0341:  GOTO   17E
0342:  MOVF   58,W
0343:  MOVWF  59
0344:  MOVLW  18
0345:  MOVWF  5A
0346:  GOTO   1EC
0347:  MOVLW  3A
0348:  MOVWF  5F
0349:  CALL   0FC
034A:  MOVLW  20
034B:  MOVWF  5F
034C:  CALL   0FC
....................                   lcd_gotoxy(indy+10,2); 
034D:  MOVLW  0A
034E:  ADDWF  52,W
034F:  MOVWF  58
0350:  MOVWF  60
0351:  MOVLW  02
0352:  MOVWF  61
0353:  CALL   0EA
....................                 
....................                   printf(lcd_putc,"%c",dato); 
0354:  MOVF   25,W
0355:  MOVWF  5F
0356:  CALL   0FC
....................                   indy++; 
0357:  INCF   52,F
0358:  BSF    03.5
....................                 
....................             } 
....................                               //Muestra dato recibido por pantalla 
....................          } 
0359:  BCF    03.5
035A:  GOTO   2EE
....................           
....................        
....................       } 
....................       printf(lcd_putc,"\f"); 
035B:  MOVLW  0C
035C:  MOVWF  5F
035D:  CALL   0FC
....................       printf(lcd_putc,"Nuevamente"); 
035E:  MOVLW  22
035F:  BSF    03.6
0360:  MOVWF  0D
0361:  MOVLW  00
0362:  MOVWF  0F
0363:  BCF    03.6
0364:  CALL   128
....................       //delay_ms(500); 
....................        
....................       lcd_gotoxy(2,2); 
0365:  MOVLW  02
0366:  MOVWF  60
0367:  MOVWF  61
0368:  CALL   0EA
....................        
....................       indy=0; 
0369:  CLRF   52
....................       exit=0; 
036A:  CLRF   27
....................       while(indy<4)//ingresar digitos nuevaente 
036B:  MOVF   52,W
036C:  SUBLW  03
036D:  BTFSS  03.0
036E:  GOTO   3C8
....................       { 
....................           
....................          if(i2c_poll())  
036F:  BSF    03.5
0370:  BTFSS  14.0
0371:  GOTO   3C6
....................          { 
....................             dato=i2c_read(); 
0372:  BCF    03.5
0373:  BCF    14.6
0374:  BTFSS  0C.3
0375:  GOTO   374
0376:  MOVF   13,W
0377:  BSF    14.4
0378:  MOVWF  25
....................             if(dato=='*') 
0379:  MOVF   25,W
037A:  SUBLW  2A
037B:  BTFSS  03.2
037C:  GOTO   380
....................                exit=1; 
037D:  MOVLW  01
037E:  MOVWF  27
037F:  GOTO   3C5
....................             else if(dato=='1'||dato=='2'||dato=='3'||dato=='4'||dato=='5'||dato=='6'||dato=='7'||dato=='8'||dato=='9'||dato=='0') 
0380:  MOVF   25,W
0381:  SUBLW  31
0382:  BTFSC  03.2
0383:  GOTO   3A8
0384:  MOVF   25,W
0385:  SUBLW  32
0386:  BTFSC  03.2
0387:  GOTO   3A8
0388:  MOVF   25,W
0389:  SUBLW  33
038A:  BTFSC  03.2
038B:  GOTO   3A8
038C:  MOVF   25,W
038D:  SUBLW  34
038E:  BTFSC  03.2
038F:  GOTO   3A8
0390:  MOVF   25,W
0391:  SUBLW  35
0392:  BTFSC  03.2
0393:  GOTO   3A8
0394:  MOVF   25,W
0395:  SUBLW  36
0396:  BTFSC  03.2
0397:  GOTO   3A8
0398:  MOVF   25,W
0399:  SUBLW  37
039A:  BTFSC  03.2
039B:  GOTO   3A8
039C:  MOVF   25,W
039D:  SUBLW  38
039E:  BTFSC  03.2
039F:  GOTO   3A8
03A0:  MOVF   25,W
03A1:  SUBLW  39
03A2:  BTFSC  03.2
03A3:  GOTO   3A8
03A4:  MOVF   25,W
03A5:  SUBLW  30
03A6:  BTFSS  03.2
03A7:  GOTO   3C5
....................             { 
....................                finger[indx][indy]=aux[1][indy]=dato; 
03A8:  MOVF   51,W
03A9:  MOVWF  58
03AA:  MOVLW  05
03AB:  MOVWF  59
03AC:  CALL   245
03AD:  MOVF   52,W
03AE:  ADDWF  78,W
03AF:  ADDLW  28
03B0:  MOVWF  78
03B1:  CLRF   7A
03B2:  BTFSC  03.0
03B3:  INCF   7A,F
03B4:  MOVLW  49
03B5:  ADDWF  52,W
03B6:  MOVWF  04
03B7:  BCF    03.7
03B8:  MOVF   25,W
03B9:  MOVWF  00
03BA:  MOVF   78,W
03BB:  MOVWF  04
03BC:  BCF    03.7
03BD:  BTFSC  7A.0
03BE:  BSF    03.7
03BF:  MOVF   25,W
03C0:  MOVWF  00
....................                indy++; 
03C1:  INCF   52,F
....................                lcd_putc(dato); 
03C2:  MOVF   25,W
03C3:  MOVWF  5F
03C4:  CALL   0FC
03C5:  BSF    03.5
....................             } 
....................                               //Muestra dato recibido por pantalla 
....................          } 
03C6:  BCF    03.5
03C7:  GOTO   36B
....................           
....................          
....................           
....................       }//while nuevamente 
....................        
....................       //////comprobar que esta bien escrito  
....................         int comp=0; 
03C8:  CLRF   53
....................          for(int k=0;k<4;k++) 
03C9:  CLRF   54
03CA:  MOVF   54,W
03CB:  SUBLW  03
03CC:  BTFSS  03.0
03CD:  GOTO   3DE
....................          { 
....................             if(aux[0][k]!=aux[1][k]) 
03CE:  MOVLW  41
03CF:  ADDWF  54,W
03D0:  MOVWF  04
03D1:  BCF    03.7
03D2:  MOVF   00,W
03D3:  MOVWF  58
03D4:  MOVLW  49
03D5:  ADDWF  54,W
03D6:  MOVWF  04
03D7:  BCF    03.7
03D8:  MOVF   00,W
03D9:  SUBWF  58,W
03DA:  BTFSS  03.2
....................                comp++; 
03DB:  INCF   53,F
03DC:  INCF   54,F
03DD:  GOTO   3CA
....................          } 
....................          if(comp>0)   
03DE:  MOVF   53,F
03DF:  BTFSC  03.2
03E0:  GOTO   3F5
....................          { 
....................             indy=0; 
03E1:  CLRF   52
....................             comp=0; 
03E2:  CLRF   53
....................             printf(lcd_putc,"\f"); 
03E3:  MOVLW  0C
03E4:  MOVWF  5F
03E5:  CALL   0FC
....................             printf(lcd_putc,"error"); 
03E6:  MOVLW  28
03E7:  BSF    03.6
03E8:  MOVWF  0D
03E9:  MOVLW  00
03EA:  MOVWF  0F
03EB:  BCF    03.6
03EC:  CALL   128
....................             delay_ms(500); 
03ED:  MOVLW  02
03EE:  MOVWF  58
03EF:  MOVLW  FA
03F0:  MOVWF  60
03F1:  CALL   045
03F2:  DECFSZ 58,F
03F3:  GOTO   3EF
....................          } 
03F4:  GOTO   3FB
....................          else 
....................          { 
....................             indy=0; 
03F5:  CLRF   52
....................             indx++; 
03F6:  INCF   51,F
....................             printf(lcd_putc,"\f"); 
03F7:  MOVLW  0C
03F8:  MOVWF  5F
03F9:  CALL   0FC
....................              
....................             ban=0; 
03FA:  CLRF   26
....................          }  
03FB:  GOTO   2DD
....................    }//Registro 
....................    exit=0; 
03FC:  CLRF   27
....................    ban=0; 
03FD:  CLRF   26
....................    printf(lcd_putc,"Registrado"); 
03FE:  MOVLW  2B
03FF:  BSF    03.6
0400:  MOVWF  0D
0401:  MOVLW  00
0402:  MOVWF  0F
0403:  BCF    03.6
0404:  CALL   128
....................    delay_ms(500); 
0405:  MOVLW  02
0406:  MOVWF  58
0407:  MOVLW  FA
0408:  MOVWF  60
0409:  CALL   045
040A:  DECFSZ 58,F
040B:  GOTO   407
....................    printf(lcd_putc,"\f"); 
040C:  MOVLW  0C
040D:  MOVWF  5F
040E:  CALL   0FC
....................   } 
040F:  GOTO   4BA
....................    
....................    
....................    else if(ban==2)// registro 
0410:  MOVF   26,W
0411:  SUBLW  02
0412:  BTFSS  03.2
0413:  GOTO   4BA
....................    { 
....................       int acceso=0; 
0414:  CLRF   55
....................       indy=0; 
0415:  CLRF   52
....................       indx=0; 
0416:  CLRF   51
....................       while(indy<4) 
0417:  MOVF   52,W
0418:  SUBLW  03
0419:  BTFSS  03.0
041A:  GOTO   4BA
....................       { 
....................           
....................          printf(lcd_putc,"\f"); 
041B:  MOVLW  0C
041C:  MOVWF  5F
041D:  CALL   0FC
....................          printf(lcd_putc,"Coloque su dedo"); 
041E:  MOVLW  31
041F:  BSF    03.6
0420:  MOVWF  0D
0421:  MOVLW  00
0422:  MOVWF  0F
0423:  BCF    03.6
0424:  CALL   128
....................          lcd_gotoxy(2,2); 
0425:  MOVLW  02
0426:  MOVWF  60
0427:  MOVWF  61
0428:  CALL   0EA
....................        
....................          while(indy<4) 
0429:  MOVF   52,W
042A:  SUBLW  03
042B:  BTFSS  03.0
042C:  GOTO   473
....................          { 
....................             if(i2c_poll())  
042D:  BSF    03.5
042E:  BTFSS  14.0
042F:  GOTO   471
....................             { 
....................                dato=i2c_read(); 
0430:  BCF    03.5
0431:  BCF    14.6
0432:  BTFSS  0C.3
0433:  GOTO   432
0434:  MOVF   13,W
0435:  BSF    14.4
0436:  MOVWF  25
....................                if(dato=='*') 
0437:  MOVF   25,W
0438:  SUBLW  2A
0439:  BTFSS  03.2
043A:  GOTO   43E
....................                   exit=1; 
043B:  MOVLW  01
043C:  MOVWF  27
043D:  GOTO   470
....................                else if(dato=='1'||dato=='2'||dato=='3'||dato=='4'||dato=='5'||dato=='6'||dato=='7'||dato=='8'||dato=='9'||dato=='0') 
043E:  MOVF   25,W
043F:  SUBLW  31
0440:  BTFSC  03.2
0441:  GOTO   466
0442:  MOVF   25,W
0443:  SUBLW  32
0444:  BTFSC  03.2
0445:  GOTO   466
0446:  MOVF   25,W
0447:  SUBLW  33
0448:  BTFSC  03.2
0449:  GOTO   466
044A:  MOVF   25,W
044B:  SUBLW  34
044C:  BTFSC  03.2
044D:  GOTO   466
044E:  MOVF   25,W
044F:  SUBLW  35
0450:  BTFSC  03.2
0451:  GOTO   466
0452:  MOVF   25,W
0453:  SUBLW  36
0454:  BTFSC  03.2
0455:  GOTO   466
0456:  MOVF   25,W
0457:  SUBLW  37
0458:  BTFSC  03.2
0459:  GOTO   466
045A:  MOVF   25,W
045B:  SUBLW  38
045C:  BTFSC  03.2
045D:  GOTO   466
045E:  MOVF   25,W
045F:  SUBLW  39
0460:  BTFSC  03.2
0461:  GOTO   466
0462:  MOVF   25,W
0463:  SUBLW  30
0464:  BTFSS  03.2
0465:  GOTO   470
....................                { 
....................                 
....................                   aux[1][indy]=dato; 
0466:  MOVLW  49
0467:  ADDWF  52,W
0468:  MOVWF  04
0469:  BCF    03.7
046A:  MOVF   25,W
046B:  MOVWF  00
....................                   indy++; 
046C:  INCF   52,F
....................                   lcd_putc(dato); 
046D:  MOVF   25,W
046E:  MOVWF  5F
046F:  CALL   0FC
0470:  BSF    03.5
....................                } 
....................                               //Muestra dato recibido por pantalla 
....................             } 
0471:  BCF    03.5
0472:  GOTO   429
....................          }   
....................     
....................          for(int k=0;k<5;k++) 
0473:  CLRF   56
0474:  MOVF   56,W
0475:  SUBLW  04
0476:  BTFSS  03.0
0477:  GOTO   495
....................          { 
....................             for(int j=0;j<4;j++) 
0478:  CLRF   57
0479:  MOVF   57,W
047A:  SUBLW  03
047B:  BTFSS  03.0
047C:  GOTO   493
....................             { 
....................                if(finger[k][j]==aux[1][j]) 
047D:  MOVF   56,W
047E:  MOVWF  58
047F:  MOVLW  05
0480:  MOVWF  59
0481:  CALL   245
0482:  MOVF   57,W
0483:  ADDWF  78,W
0484:  ADDLW  28
0485:  MOVWF  04
0486:  BCF    03.7
0487:  MOVF   00,W
0488:  MOVWF  58
0489:  MOVLW  49
048A:  ADDWF  57,W
048B:  MOVWF  04
048C:  BCF    03.7
048D:  MOVF   00,W
048E:  SUBWF  58,W
048F:  BTFSC  03.2
....................                   acceso++; 
0490:  INCF   55,F
0491:  INCF   57,F
0492:  GOTO   479
....................             } 
0493:  INCF   56,F
0494:  GOTO   474
....................              
....................          } 
....................          printf(lcd_putc,"\f"); 
0495:  MOVLW  0C
0496:  MOVWF  5F
0497:  CALL   0FC
....................          if(acceso==4) 
0498:  MOVF   55,W
0499:  SUBLW  04
049A:  BTFSS  03.2
049B:  GOTO   4AB
....................          { 
....................             printf(lcd_putc,"Acceso"); 
049C:  MOVLW  39
049D:  BSF    03.6
049E:  MOVWF  0D
049F:  MOVLW  00
04A0:  MOVWF  0F
04A1:  BCF    03.6
04A2:  CALL   128
....................             delay_ms(1000); 
04A3:  MOVLW  04
04A4:  MOVWF  58
04A5:  MOVLW  FA
04A6:  MOVWF  60
04A7:  CALL   045
04A8:  DECFSZ 58,F
04A9:  GOTO   4A5
....................          } 
04AA:  GOTO   4B9
....................          else 
....................          { 
....................             printf(lcd_putc,"Acceso denegado"); 
04AB:  MOVLW  3D
04AC:  BSF    03.6
04AD:  MOVWF  0D
04AE:  MOVLW  00
04AF:  MOVWF  0F
04B0:  BCF    03.6
04B1:  CALL   128
....................             delay_ms(1000); 
04B2:  MOVLW  04
04B3:  MOVWF  58
04B4:  MOVLW  FA
04B5:  MOVWF  60
04B6:  CALL   045
04B7:  DECFSZ 58,F
04B8:  GOTO   4B4
....................          } 
04B9:  GOTO   417
....................     
....................    } 
....................     
....................    } 
04BA:  GOTO   295
....................    
.................... } 
....................    
.................... } 
....................    
04BB:  SLEEP
....................    
....................     
....................     
....................  
....................  
....................  
....................  
....................  
....................   
....................   
....................   
....................     
....................  

Configuration Fuses:
   Word  1: 3F71   XT NOWDT PUT BROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
